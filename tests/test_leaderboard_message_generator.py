#makes it run as if it was in the root directory
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# imports function we are testing
from services.leaderboard.leaderboard_message_generator import generate_leaderboard_search_result_message

"""
Note: I did not need to create test cases for invalid inputs, such as incorrectly ordered 
score or rank thresholds (low > high), negative numbers in rank or score thresholds, or 
letters in numerical fields. This is because I have implemented mechanisms 
to block users from entering:

- Low and high score or rank thresholds in the wrong order (low must be less than or 
  equal to high).
- Negative numbers in both rank and score thresholds.
- Letters or other non-numeric characters in rank and score fields (only numbers are 
  allowed).
- Numbers in the name field (only letters are allowed in the name field).

These measures prevent users from submitting invalid data, ensuring that only 
correct and valid inputs reach the backend logic. Consequently, there is no need to 
write test cases to handle invalid inputs since they are blocked at the input stage.
"""

# The following tests are to check if the function generate_leaderboard_search_result_message is working as expected
# and that we are getting the correct message for each case back
def test_message_works_for_name_searches():
    """This test is essentially starting as if it was being run in the result endpoint 

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got recieved by the endpoint 

       The first test case for a name search - user is searching for Shirley Russell
       score_filter and rank_filter are above because that the default values for those select elements
       so that will come through even if the user didn't select anything

       We are testing the message that is generated by the function behaves as expected
    """

    params = {
        'name': "Shirley Russell",
        'score_filter': "above",
        'score_threshold': None,
        'score_threshold_low': None,
        'score_threshold_high': None,
        'rank_filter': "above",
        'rank_threshold': None,
        'rank_threshold_low': None,
        'rank_threshold_high': None
    }

    # this is where the function we are testing is called with dummy data

    message = generate_leaderboard_search_result_message(params)

    # this is the expected message we asserting for if the user searched for the name "Shirley Russell" 
    assert message == "Displaying results for the user Shirley Russell"  
    """-----------------------------------------------------------------------------------------------
    - This is the second test case for a name search - Paula Skinner-Hunter	

    - Replaces the previous name dummy data in the params with the dummy name "Paula Skinner-Hunter"

    - the function is called again but with the updated name dummy data in the params

    - and then we check if the message is as expected
    """
    params['name'] = "Paula Skinner-Hunter"

    
    message = generate_leaderboard_search_result_message(params)

    assert message == "Displaying results for the user Paula Skinner-Hunter"  

    """-----------------------------------------------------------------------------------------------
    - This is the third test case for a name search - Victor Lee	

    - Replaces the previous name dummy data in the params with the dummy name "Victor Lee"

    - the function is called again but with the updated name dummy data in the params

    - and then we check if the message is as expected
    """
    params['name'] = "Victor Lee"

    message = generate_leaderboard_search_result_message(params)

    assert message == "Displaying results for the user Victor Lee"

    """-----------------------------------------------------------------------------------------------
    - This is the fourth test case for a name search - Angela Rogers	

    - Replaces the previous name dummy data in the params with the dummy name "Angela Rogers"

    - the function is called again but with the updated name dummy data in the params

    - and then we check if the message is as expected
    """
    params['name'] = "Angela Rogers"

    message = generate_leaderboard_search_result_message(params)

    assert message == "Displaying results for the user Angela Rogers"

    """-----------------------------------------------------------------------------------------------
    - This is the fifth test case for a name search - Daniel Rice

    - I am testing my own name which is not in the leaderboard data

    - I am expecting it still works because the message at top remain's the same in my code for this case 
      but they get notified at the lack of search results underneath the message 

    - Replaces the previous name dummy data in the params with the dummy name "Daniel Rice"

    - the function is called again but with the updated name dummy data in the params

    - and then we check if the message is as expected
    """
    params['name'] = "Daniel Rice"

    message = generate_leaderboard_search_result_message(params)

    assert message == "Displaying results for the user Daniel Rice"

def test_message_works_for_filter_score_above_theshold():
    """This test area is essentially starting as if it was being run in the result endpoint 

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got recieved by the endpoint 

       The first test case for a score filter which is selected to be above and the user is filtering for scores above 2000

       We are testing that the message that is generated by the function behaves as expected
    """

    params = {
        'name': None,
        'score_filter': "above",
        'score_threshold': "2000",
        'score_threshold_low': None,
        'score_threshold_high': None,
        'rank_filter': "above",
        'rank_threshold': None,
        'rank_threshold_low': None,
        'rank_threshold_high': None
    }

    # this is where the function is called with dummy data

    message = generate_leaderboard_search_result_message(params)

    # this is the expected message we asserting for if the user filtered for scores above 2000 

    assert message == " Showing only scores higher than 2000."

    """-----------------------------------------------------------------------------------------------
    - This is the second test case for a score filter above threshold - user is searching for scores above 5000

    - Replaces the previous score_threshold dummy data in the params with the dummy score_threshold 5000

    - the function is called again but with the updated score_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['score_threshold'] = "5000"
    
    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing only scores higher than 5000."  

    """-----------------------------------------------------------------------------------------------
    - This is the third test case for a score filter above threshold - user is searching for scores above 1000

    - Replaces the previous score_threshold dummy data in the params with the dummy score_threshold 1000

    - THe function is called again but with the updated score_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['score_threshold'] = "1000"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing only scores higher than 1000."

    """-----------------------------------------------------------------------------------------------
    - This is the fourth test case for a score filter above threshold - user is searching for scores above 500

    - Replaces the previous score_threshold dummy data in the params with the dummy score_threshold 500

    - the function is called again but with the updated score_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['score_threshold'] = "500"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing only scores higher than 500."

    """-----------------------------------------------------------------------------------------------
    - This is the fifth test case for a score filter above threshold - user is searching for scores above 0

    - Replaces the previous score_threshold dummy data in the params with the dummy score_threshold 0

    - the function is called again but with the updated score_threshold dummy data in the params

    - and then we check if the message is as expected
    """

    params['score_threshold'] = "0"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing only scores higher than 0."

    """-----------------------------------------------------------------------------------------------
    - As it is not possible for the user to enter a negative number for the score_threshold I won't be testing for them
    """

def test_message_works_for_filter_score_below_threshold():
    """This test area is essentially starting as if it was being run in the result endpoint 

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got recieved by the endpoint 

       The first test case for a score filter which is selected to be below and the user is filtering for scores below 2000

       We are testing that the message that is generated by the function behaves as expected
    """

    params = {
        'name': None,
        'score_filter': "below",
        'score_threshold': "2000",
        'score_threshold_low': None,
        'score_threshold_high': None,
        'rank_filter': "above",
        'rank_threshold': None,
        'rank_threshold_low': None,
        'rank_threshold_high': None
    }

    # this is where the function is called with dummy data
    message = generate_leaderboard_search_result_message(params)
    print(f"Generated message: {message}")

    # this is the expected message if the user searched for scores below 2000
    assert message == " Showing only scores lower than 2000."

    """-----------------------------------------------------------------------------------------------
    - This is the second test case for a score filter below threshold - user is searching for scores below 5000

    - Replaces the previous score_threshold dummy data in the params with the dummy score_threshold 5000

    - the function is called again but with the updated score_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['score_threshold'] = "5000"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing only scores lower than 5000."

    """-----------------------------------------------------------------------------------------------
    - This is the third test case for a score filter below threshold - user is searching for scores below 1000

    - Replaces the previous score_threshold dummy data in the params with the dummy score_threshold 1000

    - the function is called again but with the updated score_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['score_threshold'] = "1000"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing only scores lower than 1000."

    """-----------------------------------------------------------------------------------------------
    - This is the fourth test case for a score filter below threshold - user is searching for scores below 500

    - Replaces the previous score_threshold dummy data in the params with the dummy score_threshold 500

    - the function is called again but with the updated score_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['score_threshold'] = "500"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing only scores lower than 500."

    """-----------------------------------------------------------------------------------------------
    - This is the fifth test case for a score filter below threshold - user is searching for scores below 100

    - Replaces the previous score_threshold dummy data in the params with the dummy score_threshold 100

    - the function is called again but with the updated score_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['score_threshold'] = "100"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing only scores lower than 100."

    """-----------------------------------------------------------------------------------------------
    - As it is not possible for the user to enter a negative number for the score_threshold I won't be testing for them
    """

def test_message_works_for_filter_rank_below_threshold():
    """This test area is essentially starting as if it was being run in the result endpoint 

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint 

       The first test case for a rank filter which is selected to be below and the user is filtering for ranks below 200

       We are testing that the message that is generated by the function behaves as expected
    """

    params = {
        'name': None,
        'score_filter': "above",
        'score_threshold': None,
        'score_threshold_low': None,
        'score_threshold_high': None,
        'rank_filter': "below",
        'rank_threshold': "200",
        'rank_threshold_low': None,
        'rank_threshold_high': None
    }

    # this is where the function is called with dummy data
    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for ranks below 200
    assert message == " Showing ranks lower than 200."

    """-----------------------------------------------------------------------------------------------
    - This is the second test case for a rank filter below threshold - user is searching for ranks below 100

    - Replaces the previous rank_threshold dummy data in the params with the dummy rank_threshold 100

    - the function is called again but with the updated rank_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['rank_threshold'] = "100"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing ranks lower than 100."

    """-----------------------------------------------------------------------------------------------
    - This is the third test case for a rank filter below threshold - user is searching for ranks below 50

    - Replaces the previous rank_threshold dummy data in the params with the dummy rank_threshold 50

    - the function is called again but with the updated rank_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['rank_threshold'] = "50"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing ranks lower than 50."

    """-----------------------------------------------------------------------------------------------
    - This is the fourth test case for a rank filter below threshold - user is searching for ranks below 10

    - Replaces the previous rank_threshold dummy data in the params with the dummy rank_threshold 10

    - the function is called again but with the updated rank_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['rank_threshold'] = "10"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing ranks lower than 10."

    """-----------------------------------------------------------------------------------------------
    - This is the fifth test case for a rank filter below threshold - user is searching for ranks below 300

    - Replaces the previous rank_threshold dummy data in the params with the dummy rank_threshold 300

    - the function is called again but with the updated rank_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['rank_threshold'] = "300"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing ranks lower than 300."

    """-----------------------------------------------------------------------------------------------
    - As it is not possible for the user to enter a negative number for the rank_threshold I won't be testing for them
    """

def test_message_works_for_filter_rank_above_threshold():
    """This test area is essentially starting as if it was being run in the result endpoint 

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint 

       The first test case for a rank filter which is selected to be above and the user is filtering for ranks above 200

       We are testing that the message that is generated by the function behaves as expected
    """

    params = {
        'name': None,
        'score_filter': "above",
        'score_threshold': None,
        'score_threshold_low': None,
        'score_threshold_high': None,
        'rank_filter': "above",
        'rank_threshold': "200",
        'rank_threshold_low': None,
        'rank_threshold_high': None
    }

    # this is where the function is called with dummy data
    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for ranks above 200
    assert message == " Showing ranks higher than 200."

    """-----------------------------------------------------------------------------------------------
    - This is the second test case for a rank filter above threshold - user is searching for ranks above 100

    - Replaces the previous rank_threshold dummy data in the params with the dummy rank_threshold 100

    - the function is called again but with the updated rank_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['rank_threshold'] = "100"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing ranks higher than 100."

    """-----------------------------------------------------------------------------------------------
    - This is the third test case for a rank filter above threshold - user is searching for ranks above 50

    - Replaces the previous rank_threshold dummy data in the params with the dummy rank_threshold 50

    - the function is called again but with the updated rank_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['rank_threshold'] = "50"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing ranks higher than 50."

    """-----------------------------------------------------------------------------------------------
    - This is the fourth test case for a rank filter above threshold - user is searching for ranks above 10

    - Replaces the previous rank_threshold dummy data in the params with the dummy rank_threshold 10

    - the function is called again but with the updated rank_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['rank_threshold'] = "10"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing ranks higher than 10."

    """-----------------------------------------------------------------------------------------------
    - This is the fifth test case for a rank filter above threshold - user is searching for ranks above 300

    - Replaces the previous rank_threshold dummy data in the params with the dummy rank_threshold 300

    - the function is called again but with the updated rank_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['rank_threshold'] = "300"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing ranks higher than 300."

    """-----------------------------------------------------------------------------------------------
    - As it is not possible for the user to enter a negative number for the rank_threshold I won't be testing for them
    """


def test_message_works_for_filter_rank_and_score_above_threshold():
    """This test area is for when the user has selected filtering for both ranks above and scores above a certain level.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint 

       We are testing that the message that is generated by the function behaves as expected.

       The first test case is for when the user has selected for ranks above 100 and scores above 2000.
    """

    params = {
        'name': None,
        'score_filter': "above",
        'score_threshold': "2000",
        'score_threshold_low': None,
        'score_threshold_high': None,
        'rank_filter': "above",
        'rank_threshold': "100",
        'rank_threshold_low': None,
        'rank_threshold_high': None
    }

    # this is where the function is called with dummy data

    message = generate_leaderboard_search_result_message(params)

    # the expected message if the user filtered for ranks above 100 and scores above 2000
    assert message == " Showing only scores higher than 2000. Showing ranks higher than 100."

    """-----------------------------------------------------------------------------------------------
    - This is the second test case for when the user has selected for ranks above 150 and scores above 1500
    
    - Replaces the previous rank_threshold and score_threshold dummy data in the params with the dummy rank_threshold 150 and score_threshold 1500

    - the function is called again but with the updated rank_threshold and score_threshold dummy data in the params

    - and then we check if the message is as expected

    """

    params['rank_threshold'] = "150"
    params['score_threshold'] = "1500"

    message = generate_leaderboard_search_result_message(params)

    # the expected message is if the user filtered for ranks above 150 and scores above 1500
    assert message == " Showing only scores higher than 1500. Showing ranks higher than 150."

    """-----------------------------------------------------------------------------------------------
    - This is the third test case for when the user has selected for ranks above 20 and scores above 3000
    
    - Replaces the previous rank_threshold and score_threshold dummy data in the params with the dummy rank_threshold 20 and score_threshold 3000

    - the function is called again but with the updated rank_threshold and score_threshold dummy data in the params

    - and then we check if the message is as expected

    """

    params['rank_threshold'] = "20"
    params['score_threshold'] = "3000"

    message = generate_leaderboard_search_result_message(params)

    # the expected message is if the user filtered for ranks above 20 and scores above 3000
    assert message == " Showing only scores higher than 3000. Showing ranks higher than 20."



def test_message_works_for_filter_rank_and_score_below_threshold():
    """This test area is for when the user has selected filtering for both ranks below and scores below a certain level.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint 

       We are testing that the message that is generated by the function behaves as expected.

       The first test case is for when the user has selected for ranks below 100 and scores below 2000.
    """

    params = {
        'name': None,
        'score_filter': "below",
        'score_threshold': "2000",
        'score_threshold_low': None,
        'score_threshold_high': None,
        'rank_filter': "below",
        'rank_threshold': "100",
        'rank_threshold_low': None,
        'rank_threshold_high': None
    }

    # this is where the function is called with dummy data
    message = generate_leaderboard_search_result_message(params)

    # the expected message if the user filtered for ranks below 100 and scores below 2000
    assert message == " Showing only scores lower than 2000. Showing ranks lower than 100."

    """-----------------------------------------------------------------------------------------------
    - This is the second test case for when the user has selected for ranks below 150 and scores below 1500
    
    - Replaces the previous rank_threshold and score_threshold dummy data in the params with the dummy rank_threshold 150 and score_threshold 1500

    - the function is called again but with the updated rank_threshold and score_threshold dummy data in the params

    - and then we check if the message is as expected

    """
    params['rank_threshold'] = "150"
    params['score_threshold'] = "1500"
    message = generate_leaderboard_search_result_message(params)

    # the expected message if the user filtered for ranks below 150 and scores below 1500
    assert message == " Showing only scores lower than 1500. Showing ranks lower than 150."

    """-----------------------------------------------------------------------------------------------
    - This is the third test case for when the user has selected for ranks above 20 and scores above 3000
    
    - Replaces the previous rank_threshold and score_threshold dummy data in the params with the dummy rank_threshold 20 and score_threshold 3000

    - the function is called again but with the updated rank_threshold and score_threshold dummy data in the params

    - and then we check if the message is as expected

    """

    params['rank_threshold'] = "20"
    params['score_threshold'] = "3000"

    message = generate_leaderboard_search_result_message(params)

    assert message == " Showing only scores lower than 3000. Showing ranks lower than 20."

def test_message_works_for_filter_rank_below_and_score_above():
    """This test case is for when the user has selected filtering for ranks below a certain level and scores above a certain level.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       We are testing that the message that is generated by the function behaves as expected.

       The test case is for when the user has selected for ranks below 50 and scores above 1000.
    """

    params = {
        'name': None,
        'score_filter': "above",
        'score_threshold': "1000",
        'score_threshold_low': None,
        'score_threshold_high': None,
        'rank_filter': "below",
        'rank_threshold': "50",
        'rank_threshold_low': None,
        'rank_threshold_high': None
    }

    # this is where the function is called with dummy data

    message = generate_leaderboard_search_result_message(params)

    # the expected message if the user filtered for scores above 1000 and ranks below 50 
    assert message == " Showing only scores higher than 1000. Showing ranks lower than 50."

def test_message_works_for_filter_rank_above_and_score_below():
    """This test case is for when the user has selected filtering for ranks above a certain level and scores below a certain level.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       We are testing that the message that is generated by the function behaves as expected.

       The test case is for when the user has selected for ranks above 50 and scores below 1000.
    """

    params = {
        'name': None,
        'score_filter': "below",
        'score_threshold': "1000",
        'score_threshold_low': None,
        'score_threshold_high': None,
        'rank_filter': "above",
        'rank_threshold': "50",
        'rank_threshold_low': None,
        'rank_threshold_high': None
    }

    # this is where the function is called with dummy data

    message = generate_leaderboard_search_result_message(params)

    # the expected message if the user filtered for scores below 1000 and ranks above 50
    assert message == " Showing only scores lower than 1000. Showing ranks higher than 50."

def test_message_works_for_filter_score_between_threshold():
    """This test area is essentially starting as if it was being run in the result endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The first test case is for a score filter where the user is filtering for scores between 1000 and 2000.

       We are testing that the message that is generated by the function behaves as expected.
    """

    params = {
        'name': None,
        'score_filter': "between",
        'score_threshold': None,
        'score_threshold_low': "1000",
        'score_threshold_high': "2000",
        'rank_filter': "above",
        'rank_threshold': None,
        'rank_threshold_low': None,
        'rank_threshold_high': None
    }

    # this is where the function is called with dummy data
    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for scores between 1000 and 2000
    assert message == " Displaying scores between 1000 and 2000."

    """-----------------------------------------------------------------------------------------------
    - This is the second test case for a score filter where the user is filtering for scores between 1500 and 2500

    - Replaces the previous score_threshold_low and score_threshold_high dummy data in the params with the new values

    - the function is called again but with the updated score_threshold_low and score_threshold_high dummy data in the params

    - and then we check if the message is as expected
    """
    params['score_threshold_low'] = "1500"
    params['score_threshold_high'] = "2500"

    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for scores between 1500 and 2500
    assert message == " Displaying scores between 1500 and 2500."

def test_message_works_for_filter_score_between_and_rank_above():
    """This test area is essentially starting as if it was being run in the result endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The first test case is for a score filter where the user is filtering for scores between 1000 and 2000
       and ranks higher than 200.

       We are testing that the message that is generated by the function behaves as expected.
    """

    params = {
        'name': None,
        'score_filter': "between",
        'score_threshold': None,
        'score_threshold_low': "1000",
        'score_threshold_high': "2000",
        'rank_filter': "above",
        'rank_threshold': "200",
        'rank_threshold_low': None,
        'rank_threshold_high': None
    }

    # this is where the function is called with dummy data
    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for scores between 1000 and 2000 and ranks above 200
    assert message == " Displaying scores between 1000 and 2000. Showing ranks higher than 200."

    """-----------------------------------------------------------------------------------------------
    - This is the second test case for a score filter where the user is filtering for scores between 1500 and 2500
    - and ranks higher than 100.

    - Replaces the previous score_threshold_low, score_threshold_high, and rank_threshold dummy data in the params with new values

    - the function is called again but with the updated score_threshold_low, score_threshold_high, and rank_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['score_threshold_low'] = "1500"
    params['score_threshold_high'] = "2500"
    params['rank_threshold'] = "100"

    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for scores between 1500 and 2500 and ranks above 100
    assert message == " Displaying scores between 1500 and 2500. Showing ranks higher than 100."

def test_message_works_for_filter_score_between_and_rank_below():
    """This test area is essentially starting as if it was being run in the result endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The first test case is for a score filter where the user is filtering for scores between 1000 and 2000
       and ranks lower than 200.

       We are testing that the message that is generated by the function behaves as expected.
    """

    params = {
        'name': None,
        'score_filter': "between",
        'score_threshold': None,
        'score_threshold_low': "1000",
        'score_threshold_high': "2000",
        'rank_filter': "below",
        'rank_threshold': "200",
        'rank_threshold_low': None,
        'rank_threshold_high': None
    }

    # this is where the function is called with dummy data
    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for scores between 1000 and 2000 and ranks below 200
    assert message == " Displaying scores between 1000 and 2000. Showing ranks lower than 200."

    """-----------------------------------------------------------------------------------------------
    - This is the second test case for a score filter where the user is filtering for scores between 1500 and 2500
    - and ranks lower than 100.

    - Replaces the previous score_threshold_low, score_threshold_high, and rank_threshold dummy data in the params with new values

    - the function is called again but with the updated score_threshold_low, score_threshold_high, and rank_threshold dummy data in the params

    - and then we check if the message is as expected
    """
    params['score_threshold_low'] = "1500"
    params['score_threshold_high'] = "2500"
    params['rank_threshold'] = "100"

    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for scores between 1500 and 2500 and ranks below 100
    assert message == " Displaying scores between 1500 and 2500. Showing ranks lower than 100."

def test_message_works_for_filter_rank_between_threshold():
    """This test area is essentially starting as if it was being run in the result endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The first test case is for a rank filter where the user is filtering for ranks between 100 and 200.

       We are testing that the message that is generated by the function behaves as expected.
    """

    params = {
        'name': None,
        'score_filter': "above",
        'score_threshold': None,
        'score_threshold_low': None,
        'score_threshold_high': None,
        'rank_filter': "between",
        'rank_threshold': None,
        'rank_threshold_low': "100",
        'rank_threshold_high': "200"
    }

    # this is where the function is called with dummy data
    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for ranks between 100 and 200
    assert message == " Displaying ranks between 100 and 200."

    """-----------------------------------------------------------------------------------------------
    - This is the second test case for a rank filter where the user is filtering for ranks between 50 and 150.

    - Replaces the previous rank_threshold_low and rank_threshold_high dummy data in the params with the new values

    - the function is called again but with the updated rank_threshold_low and rank_threshold_high dummy data in the params

    - and then we check if the message is as expected
    """
    params['rank_threshold_low'] = "50"
    params['rank_threshold_high'] = "150"

    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for ranks between 50 and 150
    assert message == " Displaying ranks between 50 and 150."


def test_message_works_for_filter_score_above_and_rank_between():
    """This test area is essentially starting as if it was being run in the result endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The first test case is for a score filter where the user is filtering for scores higher than 1000
       and ranks between 100 and 200.

       We are testing that the message that is generated by the function behaves as expected.
    """

    params = {
        'name': None,
        'score_filter': "above",
        'score_threshold': "1000",
        'score_threshold_low': None,
        'score_threshold_high': None,
        'rank_filter': "between",
        'rank_threshold': None,
        'rank_threshold_low': "100",
        'rank_threshold_high': "200"
    }

    # this is where the function is called with dummy data
    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for scores above 1000 and ranks between 100 and 200
    assert message == " Showing only scores higher than 1000. Displaying ranks between 100 and 200."

    """-----------------------------------------------------------------------------------------------
    - This is the second test case for a score filter where the user is filtering for scores higher than 1500
    - and ranks between 50 and 150.

    - Replaces the previous score_threshold, rank_threshold_low, and rank_threshold_high dummy data in the params with the new values

    - the function is called again but with the updated score_threshold, rank_threshold_low, and rank_threshold_high dummy data in the params

    - and then we check if the message is as expected
    """
    params['score_threshold'] = "1500"
    params['rank_threshold_low'] = "50"
    params['rank_threshold_high'] = "150"

    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for scores above 1500 and ranks between 50 and 150
    assert message == " Showing only scores higher than 1500. Displaying ranks between 50 and 150."

def test_message_works_for_filter_score_below_and_rank_between():
    """This test area is essentially starting as if it was being run in the result endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The first test case is for a score filter where the user is filtering for scores lower than 1000
       and ranks between 100 and 200.

       We are testing that the message that is generated by the function behaves as expected.
    """

    params = {
        'name': None,
        'score_filter': "below",
        'score_threshold': "1000",
        'score_threshold_low': None,
        'score_threshold_high': None,
        'rank_filter': "between",
        'rank_threshold': None,
        'rank_threshold_low': "100",
        'rank_threshold_high': "200"
    }

    # this is where the function is called with dummy data
    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for scores lower than 1000 and ranks between 100 and 200
    assert message == " Showing only scores lower than 1000. Displaying ranks between 100 and 200."

    """-----------------------------------------------------------------------------------------------
    - This is the second test case for a score filter where the user is filtering for scores lower than 1500
    - and ranks between 50 and 150.

    - Replaces the previous score_threshold, rank_threshold_low, and rank_threshold_high dummy data in the params with the new values

    - the function is called again but with the updated score_threshold, rank_threshold_low, and rank_threshold_high dummy data in the params

    - and then we check if the message is as expected
    """
    params['score_threshold'] = "1500"
    params['rank_threshold_low'] = "50"
    params['rank_threshold_high'] = "150"

    message = generate_leaderboard_search_result_message(params)

    # this is the expected message if the user searched for scores lower than 1500 and ranks between 50 and 150
    assert message == " Showing only scores lower than 1500. Displaying ranks between 50 and 150."





