#makes it run as if it was in the root directory
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# imports function we are testing
from services.user_submissions.user_submissions_message_generator import generate_user_submissions_search_result_message

# The following tests are to check if the function generate_user_submissions_search_result_message is working as expected
# and that we are getting the correct message for each case back

def test_message_for_all_submissions_sorted_by_date_asc():
    """This test is behaving as if it was being run in the user-submissions endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The test case is for when the user has selected to filter user submissions 
       by date in ascending order and to display all submissions (not just ones qualified for ranking).

       We are testing that the message generated by the function is as expected.
    """
    
    sort = "date"
    order = "asc"
    qualifiedorall = "all"
    
    message = generate_user_submissions_search_result_message(sort, order, qualifiedorall)

    expected_message = "Displaying all submissions & sorting user submissions by date in ascending order."

    assert message == expected_message


def test_message_for_all_submissions_sorted_by_date_desc():
    """This test is behaving as if it was being run in the user-submissions endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The test case is for when the user has selected to filter user submissions 
       by date in descending order and to display all submissions (not just ones qualified for ranking).

       We are testing that the message generated by the function is as expected.
    """
    
    sort = "date"
    order = "desc"
    qualifiedorall = "all"
    
    message = generate_user_submissions_search_result_message(sort, order, qualifiedorall)

    expected_message = "Displaying all submissions & sorting user submissions by date in descending order."

    assert message == expected_message


def test_message_for_all_submissions_sorted_by_score_asc():
    """This test is behaving as if it was being run in the user-submissions endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The test case is for when the user has selected to filter user submissions 
       by score in ascending order and to display all submissions (not just ones qualified for ranking).

       We are testing that the message generated by the function is as expected.
    """
    
    sort = "score"
    order = "asc"
    qualifiedorall = "all"
    
    message = generate_user_submissions_search_result_message(sort, order, qualifiedorall)

    expected_message = "Displaying all submissions & sorting user submissions by score in ascending order."

    assert message == expected_message


def test_message_for_all_submissions_sorted_by_score_desc():
    """This test is behaving as if it was being run in the user-submissions endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The test case is for when the user has selected to filter user submissions 
       by score in descending order and to display all submissions (not just ones qualified for ranking).

       We are testing that the message generated by the function is as expected.
    """
    
    sort = "score"
    order = "desc"
    qualifiedorall = "all"
    
    message = generate_user_submissions_search_result_message(sort, order, qualifiedorall)

    expected_message = "Displaying all submissions & sorting user submissions by score in descending order."

    assert message == expected_message


def test_message_for_qualified_submissions_sorted_by_date_asc():
    """This test is behaving as if it was being run in the user-submissions endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The test case is for when the user has selected to filter user submissions 
       by date in ascending order and to display only qualified submissions (top 24 submissions).

       We are testing that the message generated by the function is as expected.
    """
    
    sort = "date"
    order = "asc"
    qualifiedorall = "qualified"
    
    message = generate_user_submissions_search_result_message(sort, order, qualifiedorall)

    expected_message = "Displaying only the user's top 24 submissions, with a minimum of 3 submissions required to qualify for ranking & sorting user submissions by date in ascending order."

    assert message == expected_message


def test_message_for_qualified_submissions_sorted_by_date_desc():
    """This test is behaving as if it was being run in the user-submissions endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The test case is for when the user has selected to filter user submissions 
       by date in descending order and to display only qualified submissions (top 24 submissions).

       We are testing that the message generated by the function is as expected.
    """
    
    sort = "date"
    order = "desc"
    qualifiedorall = "qualified"
    
    message = generate_user_submissions_search_result_message(sort, order, qualifiedorall)

    expected_message = "Displaying only the user's top 24 submissions, with a minimum of 3 submissions required to qualify for ranking & sorting user submissions by date in descending order."

    assert message == expected_message


def test_message_for_qualified_submissions_sorted_by_score_asc():
    """This test is behaving as if it was being run in the user-submissions endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The test case is for when the user has selected to filter user submissions 
       by score in ascending order and to display only qualified submissions (top 24 submissions).

       We are testing that the message generated by the function is as expected.
    """
    
    sort = "score"
    order = "asc"
    qualifiedorall = "qualified"
    
    message = generate_user_submissions_search_result_message(sort, order, qualifiedorall)

    expected_message = "Displaying only the user's top 24 submissions, with a minimum of 3 submissions required to qualify for ranking & sorting user submissions by score in ascending order."

    assert message == expected_message


def test_message_for_qualified_submissions_sorted_by_score_desc():
    """This test is behaving as if it was being run in the user-submissions endpoint.

       It creates dummy data (as if it was coming from what the user filled in on the search form)
       and got received by the endpoint.

       The test case is for when the user has selected to filter user submissions 
       by score in descending order and to display only qualified submissions (top 24 submissions).

       We are testing that the message generated by the function is as expected.
    """
    
    sort = "score"
    order = "desc"
    qualifiedorall = "qualified"
    
    message = generate_user_submissions_search_result_message(sort, order, qualifiedorall)

    expected_message = "Displaying only the user's top 24 submissions, with a minimum of 3 submissions required to qualify for ranking & sorting user submissions by score in descending order."

    assert message == expected_message


